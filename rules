# -*- Mode: makefile; -*- #

# This file is part of MKUltra - Gene's ultimate make include files.

# Copyright Â© 2016-2017 Gene Hightower <gene@digilicious.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.

# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  See the file LICENSE.  If not, see
# <http://www.gnu.org/licenses/>.

SHELL := /bin/bash

uname := $(shell uname)

ifneq (,$(findstring CYGWIN_NT,$(uname)))
  TARG := Win32
endif
ifneq (,$(findstring MINGW32_NT,$(uname)))
  TARG := Win32
endif

TARG ?= $(uname)

# Java is "special" in many ways, doesn't use pkg-config: requires
# per-platform hacks.

JAVA := $(findstring Java,$(USES))
USES := $(filter-out Java,$(USES))

current_dir := $(dir $(CURDIR)/$(lastword $(MAKEFILE_LIST)))
include $(current_dir)defs.$(TARG)

ifneq (,$(JAVA))
JAVAC ?= $(JAVA_HOME)/bin/javac
endif

PREFIX ?= /usr/local
BINDIR ?= $(PREFIX)/bin
LIBDIR ?= $(PREFIX)/lib
DATADIR ?= $(PREFIX)/share

AR := gcc-ar

libfiles := $(foreach x,$(LIBS),$(a_pfx)$(x)$(a_sfx)) $(foreach x,$(LIBS),$(so_pfx)$(x)$(so_sfx))
prgfiles := $(foreach x,$(PROGRAMS),$(x)$(exe_sfx))
tstfiles := $(foreach x,$(TESTS),$(x)$(exe_sfx))

ifeq (clang,$(notdir $(CXX)))
warnings := \
 -Weverything \
 -Wformat=2 \
 -Wno-c++98-compat \
 -Wno-c++98-compat-pedantic \
 -Wno-disabled-macro-expansion \
 -Wno-exit-time-destructors \
 -Wno-extra-semi \
 -Wno-global-constructors \
 -Wno-missing-field-initializers \
 -Wno-missing-prototypes \
 -Wno-packed \
 -Wno-padded \
 -Wno-shadow \
 -Wno-sign-conversion \
 -Wno-undefined-func-template \
 -Wno-unused-const-variable \
 -Wno-unused-exception-parameter \
 -Wno-unused-parameter \
 -Wno-zero-length-array
else
warnings_c := \
 -Wall \
 -Wextra \
 -Wformat=2 \
 -Wno-missing-field-initializers \
 -Wno-padded \
 -Wno-unused-const-variable \
 -Wno-unused-parameter

warnings_cpp := \
  $(warnings_c) \
 -Wold-style-cast \
 -Woverloaded-virtual \
 -Wuseless-cast
endif

opt_flags := -O3

safty_flags := -fstack-check -fsanitize=address -fsanitize=undefined -fsanitize-address-use-after-scope

CFLAGS += $(warnings_c) -MMD -fvisibility=hidden $(opt_flags) $(safty_flags)
CXXFLAGS += -std=c++17 $(warnings_cpp) -MMD -fvisibility=hidden $(opt_flags) $(safty_flags)

# hack for libraries that must be first in the list
ldlibs_first := -lasan -lubsan
LDLIBS += -lstdc++fs

# CFLAGS += -flto
# CXXFLAGS += -flto
# LDFLAGS += -flto

ifneq (,$(USES))
CFLAGS += $(shell PKG_CONFIG_LIB=$(pkg_config_lib) pkg-config $(PKG_CONFIG_FLAGS) --cflags $(USES))
CXXFLAGS += $(shell PKG_CONFIG_LIB=$(pkg_config_lib) pkg-config $(PKG_CONFIG_FLAGS) --cflags $(USES))
LDLIBS += $(shell PKG_CONFIG_LIB=$(pkg_config_lib) pkg-config $(PKG_CONFIG_FLAGS) --libs $(USES))
endif

#############################################################################

%.o: %.mm
	$(CXX) -o $@ -fPIC $(CPPFLAGS) $(CXXFLAGS) -c $<

%.o: %.m
	$(CC) -o $@ -fPIC $(CPPFLAGS) $(CFLAGS) -c $<

#############################################################################

ifneq (,$(BUNDLE_PREFIX))
# Bundle for NeXTSTEP, OPENSTEP, GNUstep, and their lineal descendants
# macOS and iOS.

bundle_dir = $(BUNDLE_PREFIX)/Contents
bundle_bin_dir = $(bundle_dir)/MacOS
bundle_lib_dir = $(bundle_dir)/lib
bundle_dat_dir = $(bundle_dir)/share

bundle_all_dirs = $(bundle_bin_dir) $(bundle_lib_dir) $(bundle_dat_dir)

bundle:: all

$(bundle_all_dirs)::
	mkdir -p $@
endif

#############################################################################

all::
ifneq (,$(strip $(libfiles)))
	$(MAKE) $(libfiles)
endif
ifneq (,$(strip $(prgfiles)))
	$(MAKE) $(prgfiles)
endif
	@echo done with all

check:: all $(tstfiles)

install:: all

ifneq (,$(libfiles))
install:: $(libfiles) $(LIBDIR)
	cp $(libfiles) $(LIBDIR)
ifneq (,$(bundle_lib_dir))
	cp $(libfiles) $(bundle_lib_dir)
endif
endif

ifneq (,$(prgfiles))
install:: $(prgfiles) $(BINDIR)
	cp $(prgfiles) $(BINDIR)
ifneq (,$(bundle_bin_dir))
	cp $(prgfiles) $(bundle_bin_dir)
endif
endif

ifneq (,$(DATA))
install:: $(DATA) $(DATADIR)
	cp -r $(DATA) $(DATADIR)
ifneq (,$(bundle_dat_dir))
	cp -r $(DATA) $(bundle_dat_dir)
endif
endif

ifneq (,$(tstfiles))
tests: all $(tstfiles)

install-tests:: all $(tstfiles) $(BINDIR)
	cp $(tstfiles) $(BINDIR)
endif

$(BINDIR) $(LIBDIR) $(DATADIR):
	mkdir -p $@

#############################################################################

define test_cmd
$(1)_STEMS += $(1)

check:: $(1)$(exe_sfx)
	time ./$(1) ;

vg:: $(1)$(exe_sfx)
	valgrind $(VGFLAGS) ./$(1) ;
endef

$(foreach t,$(TESTS),$(eval $(call test_cmd,$(t))))

#############################################################################

define link_cmd
$(1)_all_stems := $$($(1)_STEMS)
$(1)_objs := $$(patsubst %,%$(o_sfx),$$($(1)_all_stems))
$(1)_deps := $$(patsubst %,%.d,$$($(1)_all_stems))

-include $$($(1)_deps)


$(1)$(exe_sfx):: $$($(1)_objs) $$($(1)_EXTRAS)
	$(CXX) -o $$@ $$^ $(LDFLAGS) $(ldlibs_first) $(LDLIBS) -L. $(foreach l,$(LIBS),-l$(l))

clean::
	rm -f $(1)$(exe_sfx) $$($(1)_objs) $$($(1)_deps)
endef

$(foreach prog,$(PROGRAMS),$(eval $(call link_cmd,$(prog))))
$(foreach prog,$(TESTS),$(eval $(call link_cmd,$(prog))))

#############################################################################

define lib_cmd
$(1)_all_stems := $$($(1)_STEMS)
$(1)_objs := $$(patsubst %,%$(o_sfx),$$($(1)_all_stems))
$(1)_deps := $$(patsubst %,%.d,$$($(1)_all_stems))

-include $$($(1)_deps)

$(a_pfx)$(1)$(a_sfx): $$($(1)_objs)
	$(AR) rsv $$@ $$^

$(so_pfx)$(1)$(so_sfx): $$($(1)_objs)
	$(CXX) -shared -o $$@ $$^ $(filter-out -static,$(LDFLAGS)) $(LOADLIBES) $(LDLIBS)

clean::
	rm -f $(so_pfx)$(1)$(so_sfx) $(a_pfx)$(1)$(a_sfx) $$($(1)_objs) $$($(1)_deps)
endef

$(foreach lib,$(LIBS),$(eval $(call lib_cmd,$(lib))))

#############################################################################

dump::
ifneq (,$(JAVA))
	@echo "Using JAVA"
endif
	@echo JAVA_HOME == $(JAVA_HOME)
	@echo MAKEFILE_LIST == $(MAKEFILE_LIST)
	@echo .INCLUDE_DIRS == $(.INCLUDE_DIRS)
	@echo USES == $(USES)
	@echo PROGRAMS == $(PROGRAMS)
	@echo LIBS == $(LIBS)
	@echo TESTS == $(TESTS)
	@echo CFLAGS == $(CFLAGS)
	@echo CXXFLAGS == $(CXXFLAGS)
	@echo LDFLAGS  == $(LDFLAGS)

dump::
	@echo libfiles == $(libfiles)
	@echo prgfiles == $(prgfiles)
	@echo tstfiles == $(tstfiles)

define dump_template
dump::
	@echo
	@echo $(1)_all_stems == $$($(1)_all_stems)
	@echo $(1)_objs == $$($(1)_objs)
	@echo $(1)_deps == $$($(1)_deps)
endef

$(foreach x,$(PROGRAMS),$(eval $(call dump_template,$(x))))
$(foreach x,$(LIBS),$(eval $(call dump_template,$(x))))
$(foreach x,$(TESTS),$(eval $(call dump_template,$(x))))

.PHONY:: all check dump install install-tests tests all_programs all_libraries
